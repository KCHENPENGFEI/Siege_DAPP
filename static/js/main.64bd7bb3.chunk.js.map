{"version":3,"sources":["logo.svg","page/Auction/Auction.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","getitem","arr","i","push","getDiv","item","react_default","a","createElement","className","PageAuction","class","id","map","type","App","Auction_Auction","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8ICIlCC,0BAAU,WAEZ,IADA,IAAIC,EAAM,GACFC,EAAI,EAAIA,EAAI,GAAIA,IACpBD,EAAIE,KAAKD,GACb,OAAOD,IAGLG,EAAS,SAACC,GAAD,OAAUC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAf,gBAA6CJ,IAoDvDK,MAjDf,WACE,OACEJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAf,4BAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBAAf,mUAIJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAf,4BAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAAA,OAAKG,MAAM,YAAYC,GAAG,WACrBZ,IAAUa,IAAIT,KAGvBE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BAAf,0DAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCAAf,UAIJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BACfH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,8BAA8BK,KAAK,UAExDR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAAf,iCChCLM,MAXf,WACE,OACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACQ,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.64bd7bb3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './Auction.css'\r\n\r\n\r\nconst getitem = ()=>{\r\n    let arr = []\r\n    for(let i = 0 ; i < 50 ;i++)\r\n        arr.push(i)\r\n    return arr;\r\n}\r\n\r\nconst getDiv = (item) =>(<div className=\"zsAuctionItem\">this is item {item}</div>)\r\n\r\n\r\nfunction PageAuction() {\r\n  return (\r\n    <div className=\"zsAuctionOutSide\">\r\n        <div className=\"zsAuctionInSide\">\r\n            <div className=\"zsAuctionTitle\">\r\n                城主招募\r\n            </div>\r\n            <div className=\"zsAuctionRule\">\r\n                <div className=\"zsAuctionRuleContent\">\r\n                城池的拥有者通过拍卖竞价得到城池归属权，竞价较高者在守城过程中会拥有特殊权利——价格更高的城池更难被攻破。\r\n                </div>\r\n            </div>\r\n            <div className=\"zsAuctionMain\">\r\n                <div className=\"zsAuctionMainTitle\">\r\n                    当前竞价\r\n                </div>\r\n                <div className=\"zsAuctionMainRanking\">\r\n                    <div class=\"scrolldiv\" id=\"testDiv\">\r\n                        {getitem().map(getDiv)}\r\n                    </div>\r\n                </div>\r\n                <div className=\"zsAuctionMainInfo\">\r\n                    <div className=\"zsAuctionMainInfoTime\">\r\n                        <div className=\"zsAuctionMainInfoTimeTitle\">\r\n                            第一轮竞标结束时间\r\n                        </div>\r\n                        <div className=\"zsAuctionMainInfoTimeContent\">\r\n                            15:00\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"zsAuctionMainInfoMoney\">\r\n                        <img className=\"zsAuctionMainInfoMoneyLogo\"/>\r\n                        <input className=\"zsAuctionMainInfoMoneyInput\" type=\"text\"/>\r\n                    </div>\r\n                    <div className=\"zsAuctionMainInfoButton\">\r\n                        确认竞标\r\n                    </div>\r\n                    \r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default PageAuction;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport PageAuction from './page/Auction/Auction'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PageAuction/>\n    </div>\n  );\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}